- name: Perform dist upgrade
  become: yes
  apt:
    update_cache: yes
    upgrade: dist
    autoremove: yes
    autoclean: yes

- block:
    # TODO setup github keys https://docs.ansible.com/ansible/github_key_module.html
    - name: "git Starting deployment for {{ deployment_version }}: {{ ongoing_deployment|basename }}"
      git:
        accept_hostkey: yes
        repo: "{{ repo }}"
        clone: yes
        update: yes
        version: "{{ deployment_version }}"
        dest: "{{ ongoing_deployment }}"

    - name: Copy over env vars
      template:
        src: .env.example.j2
        dest: "{{ ongoing_deployment }}/.env"

    - name: Create venv and install requirements
      pip:
        chdir: "{{ ongoing_deployment }}"
        virtualenv: "{{ venv_path }}"
        virtualenv_python: "{{ venv_python_version }}"
        state: present
        requirements: "requirements.txt"

    - name: Install npm packages
      npm:
        path: "{{ ongoing_deployment }}"
        production: yes
        state: present

    - name: Run production webpack build
      command: npm run build
      args:
        chdir: "{{ ongoing_deployment }}"

    - name: Collect static
      django_manage:
        app_path: "{{ ongoing_deployment }}"
        command: "collectstatic --noinput -i scss"
        virtualenv: "{{ venv_path }}"

    - name: Run migrations
      django_manage:
        app_path: "{{ ongoing_deployment }}"
        command: "migrate --noinput"
        virtualenv: "{{ venv_path }}"

    - name: Run seeds
      django_manage:
        app_path: "{{ ongoing_deployment }}"
        command: "seed"
        virtualenv: "{{ venv_path }}"

    - name: Get stats for current symlink
      stat:
        follow: yes
        path: "{{ current_symlink }}"
      register: current_symlink_stat

    # If current and previous symlinks dne
    - name: Create current symlink
      file:
        path: "{{ current_symlink }}"
        src: "{{ ongoing_deployment }}"
        state: link
      when: not current_symlink_stat.stat.exists

    - name: Create previous symlink
      file:
        path: "{{ previous_symlink }}"
        src: "{{ ongoing_deployment }}"
        state: link
      when: not current_symlink_stat.stat.exists

    # If current and previous symlinks exist
    - name: Read current symlink value
      shell: "readlink {{ current_symlink }}"
      register: current_symlink_dir
      when: current_symlink_stat.stat.exists

    - name: Update previous symlink to point to current deployment dir
      file:
        path: "{{ previous_symlink }}"
        src: "{{ current_symlink_dir.stdout }}"
        force: yes
        state: link
      when: current_symlink_stat.stat.exists

    - name: Update current symlink to point to ongoing deployment dir
      file:
        path: "{{ current_symlink }}"
        src: "{{ ongoing_deployment }}"
        force: yes
        state: link
      when: current_symlink_stat.stat.exists

    # As of now there are a few seconds where the user could get a 502 bad gateway error. This should be fine with
    # loadbalancing and multiple webservers, but for true 0 downtime deployments look at http://docs.gunicorn.org/en/stable/signals.html
    # The simple HUP signal doesn't work. Need to switch binary on the fly.
    - include: ../../utils/restart_gunicorn.yml

    - name: Save current deployment to deployment history file
      lineinfile:
        create: yes
        insertafter: EOF
        line: "{{ ongoing_deployment }}"
        path: "{{ deployment_history_file }}"
        state: present

    # If want a catch all that will delete all old deployment dirs, see https://docs.ansible.com/ansible/playbooks_filters.html#extracting-values-from-containers
    # Use map, extract, difference
    - name: Get current deployment history
      shell: "cat {{ deployment_history_file }}"
      register: deployment_history

    # First line in file is the oldest deployment directory
    - name: Remove oldest deployment directory
      file:
        path: "{{ deployment_history.stdout_lines|first }}"
        state: absent
      when: "deployment_history.stdout_lines|length > max_deployment_dirs"

    - name: Remove oldest deployment directory from history file
      lineinfile:
        path: "{{ deployment_history_file }}"
        line: "{{ deployment_history.stdout_lines|first }}"
        state: absent
      when: "deployment_history.stdout_lines|length > max_deployment_dirs"

  rescue:
    - name: Remove current symlink if was just created
      file:
        path: "{{ current_symlink }}"
        state: absent
      when: current_symlink_stat is defined and not current_symlink_stat.stat.exists

    - name: Remove previous symlink if was just created
      file:
        path: "{{ previous_symlink }}"
        state: absent
      when: current_symlink_stat is defined and not current_symlink_stat.stat.exists

    - name: Read previous symlink value
      shell: "readlink {{ previous_symlink }}"
      register: previous_symlink_dir
      when: current_symlink_stat is defined and current_symlink_stat.stat.exists

    - name: Have current symlink point to previous
      file:
        path: "{{ current_symlink }}"
        src: "{{ previous_symlink_dir.stdout }}"
        force: yes
        state: link
      when: current_symlink_stat is defined and current_symlink_stat.stat.exists

    - include: ../../utils/restart_gunicorn.yml
      when: current_symlink_stat is defined and current_symlink_stat.stat.exists

    # TODO Clean up failed_deployments/ dir (cron?)
    - name: "Moving {{ ongoing_deployment|basename }} to {{ failed_deployments_dir|basename }}/"
      command: "mv {{ ongoing_deployment }} {{ failed_deployments_dir }}/{{ ongoing_deployment|basename }}"
      args:
        creates: "{{ failed_deployments_dir }}/{{ ongoing_deployment|basename }}"
        removes: "{{ ongoing_deployment }}"
