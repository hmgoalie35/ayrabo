from django.db.utils import IntegrityError
from django.test import TestCase

from sports.models import Sport
from .factories.SportFactory import SportFactory
from escoresheet.testing_utils import is_queryset_in_alphabetical_order


class SportModelTests(TestCase):
    # Slugs are auto generated from the name attribute, so the uniqueness of slugs makes sure names are also unique for case insensitive
    # ice Hockey and Ice Hockey will pass the uniqueness of the name field, but won't pass uniqueness of slug field
    def test_unique_names_case_sensitive(self):
        SportFactory.create(name='Ice Hockey')
        with self.assertRaises(IntegrityError, msg='UNIQUE constraint failed: sports_sport.name'):
            SportFactory.create(name='Ice Hockey')

    def test_unique_slugs_case_insensitive(self):
        # Slug is autogenerated via overridden .save() method
        SportFactory.create(name='ice Hockey')
        with self.assertRaises(IntegrityError, msg='UNIQUE constraint failed: sports_sport.slug'):
            SportFactory.create(name='ice hockey')

    def test_slug_generation(self):
        ice_hockey = SportFactory.create(name='Ice hockey')
        self.assertEqual(ice_hockey.slug, 'ice-hockey')

    def test_default_ordering(self):
        SportFactory.create_batch(5)
        self.assertTrue(is_queryset_in_alphabetical_order(Sport.objects.all(), 'name'))

    def test_to_string(self):
        sport = SportFactory.build(name='Ice Hockey')
        self.assertEqual(str(sport), 'Ice Hockey')

    def test_name_converted_to_titlecase(self):
        sport = SportFactory.create(name='ice hockey')
        self.assertEqual(sport.name, 'Ice Hockey')
